{
    "bazel.buildifierExecutable": "~/code/na/tools/buildifier",
    //"bazel.buildifierExecutable": "/home/ctytler/code/na/external/buildifier/file/downloaded",
    "bazel.executable": "/home/ctytler/code/na/tools/bazel",
    "clangd.path": "~/code/na/tools/clangd",
    "shellcheck.executablePath": "~/code/na/tools/shellcheck",
    "C_Cpp.default.compileCommands": "${workspaceFolder}/compile_commands.json",

    // `-background-index` enables background creation of an index for clangd. This enables things like auto completion of things in the
    // current translation unit, automatically adding incldues, find all references. Unfortunately it's still experimental,
    // eats up a lot of CPU, is slow, fails a lot (silently in the background but still) and seems to slow down clangd in
    // vscode in general. So you can decide if you  want it!
    // `-clang-tidy` enables clang tidy checks in line by adding this to your clangd arguments. It causes the clangd extension to crash in certain circumstances so depending on what your personal preference you may or may not want to use it.
    "clangd.arguments": ["-background-index", "-clang-tidy", "-j=4", "--pch-storage=memory"],

    // Use ctrl+shift+p -> 'Save without formatting' when you don't want this
    "editor.formatOnSave": true,
    // fix bazel BUILD files
    "bazel.buildifierFixOnFormat": true,

    // Whether auto fetching is enabled.
    "git.autofetch": true,
    // Commit all changes when there are no staged changes.
    //"git.enableSmartCommit": true,

    "breadcrumbs.enabled": true,

    // Controls how the editor should render whitespace characters.
    //  - none
    //  - boundary: Render whitespace characters except for single spaces between words.
    //  - all
    "editor.renderWhitespace": "boundary",
    // Controls whether opened editors show as preview. Preview editors are reused until they are kept (e.g. via double click or editing) and show up with an italic font style.
    "workbench.editor.enablePreview": true,

    // Neovim integration into VSCodeVIM
    // "vim.enableNeovim": true,
    // "vim.neovimPath": "/usr/local/bin/nvim",
    "vim.camelCaseMotion.enable": true,
    "vim.easymotion": true,
    "vim.visualstar": true,
    "workbench.colorTheme": "Pastel Pro",
    "workbench.iconTheme": "vscode-icons",

    "githubPullRequests.queries": [
        {
            "label": "Waiting For My Review",
            "query": "is:open review-requested:${user} archived:false -review:approved"
        },
        {
            "label": "Commented on by Me",
            "query": "is:open review-requested:${user} commenter:${user} archived:false -review:approved"
        },
        {
            "label": "Accepted by Others",
            "query": "is:open review:approved review-requested:${user} archived:false"
        },
        {
            "label": "Reviewed by Me",
            "query": "is:open reviewed-by:${user} archived:false"
        },
        {
            "label": "Mentioned Me - Needs Review",
            "query": "is:open mentions:${user}"
        },
        {
            "label": "Mentioned Me - Accepted",
            "query": "is:open mentions:${user}"
        },
        {
            "label": "Assigned To Me",
            "query": "is:open assignee:${user}"
        },
        {
            "label": "Created By Me",
            "query": "is:open author:${user}"
        },
    ],

    "vim.insertModeKeyBindings": [
        {
            "before": ["j", "k"],
            "after": ["<Esc>"]
        }
    ],

    "vim.normalModeKeyBindings": [
        {
            "before": ["("],
            "commands": ["workbench.action.previousEditorInGroup"]
        },
        {
            "before": [")"],
            "commands": ["workbench.action.nextEditorInGroup"]
        },
        {
            "before": ["backspace"],
            "commands": ["workbench.action.keepEditor"]
        },
        {
            "before": ["g", "d"],
            "commands": ["editor.action.peekDefinition"]
        },
        {
            "before": ["g", "s"],
            "commands": ["workbench.action.showAllSymbols"]
        },
        {
            "before": ["g", "r"],
            "commands": ["editor.action.referenceSearch.trigger"]
        },
        {
            "before": ["g", ";"],
            "commands": ["workbench.action.findInFiles"]
        },
        {
            "before": ["W"],
            "after": ["w"]
        }
        {
            "before": ["f", "w"],
            "after": ["W"]
        },
        {
            "before": ["w"],
            "after": ["leader", "w"]
        }
        {
            "before": ["leader", "t"],
            "commands": ["workbench.files.action.showActiveFileInExplorer"]
        }
        // Easymotion
        {
            "before": ["f", "h"],
            "after": ["leader", "leader", "b"]
        },
        {
            "before": ["f", "j"],
            "after": ["leader", "leader", "j"]
        },
        {
            "before": ["f", "k"],
            "after": ["leader", "leader", "k"]
        },
        {
            "before": ["f", "l"],
            "after": ["leader", "leader", "w"]
        },
        {
            "before": ["f", "H"],
            "after": ["leader", "leader", "h"]
        },
        {
            "before": ["f", "J"],
            "after": ["leader", "leader", "j"]
        },
        {
            "before": ["f", "K"],
            "after": ["leader", "leader", "k"]
        },
        {
            "before": ["f", "L"],
            "after": ["leader", "leader", "l"]
        },
    ],

    "vim.visualModeKeyBindings": [
        {
            "before": ["g", "d"],
            "commands": ["editor.action.peekDefinition"]
        },
        {
            "before": ["g", ";"],
            "commands": ["workbench.action.findInFiles"]
        },
    ],
    "search.location": "sidebar",
    "files.hotExit": "off",
    "workbench.startupEditor": "newUntitledFile",
    "vim.easymotionKeys": "hklyuiopnmqwertzxcvbasdgjf",
    "vim.easymotionMarkerFontSize": "16",
    "vim.easymotionMarkerYOffset": 3,
    "vim.easymotionMarkerHeight": 16,
    "vim.easymotionMarkerFontFamily": "monospace",
    "vim.foldfix": true,
}
